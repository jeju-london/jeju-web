extends layout

block css
    link(rel='stylesheet', href='/stylesheets/content.css')

block tab
    include tab.pug

block content
    div(class="container" )

        //ul
        //  each region in regionlist
        //    li #{region.type}

        div(class="btn-group wrap-depth1")
            button(type="button" class="btn btn-primary btn-depth1 dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") 지리별
                span(class="caret")
            ul(class="dropdown-menu")
                li(data-centerCoord={x:33.3823105, y:126.5332869, level:9})
                    a(href="#")
                        strong 지리별
                        span(class="glyphicon glyphicon-ok" aria-hidden="true")

                li(data-region='north' data-centerCoord={x: 33.457543138530234, y: 126.52121318906023, level:8})
                    a(href="#") 북부
                li(data-region='south' data-centerCoord={x: 33.31297232505243, y: 126.51478872617335, level:8})
                    a(href="#") 남부
                li(data-region='east' data-centerCoord={x: 33.46986571255288, y: 126.81203766523701, level:8})
                    a(href="#") 동부
                li(data-region='west' data-centerCoord={x: 33.31711594804748, y: 126.24637996878465, level:8})
                    a(href="#") 서부

        div(class="btn-group btn-emd hide")
            button(type="button" class="btn btn-primary dropdown-toggle btn-depth2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false") 경기장
                span(class="caret")
            ul(class="dropdown-menu")
                li
                    a(href="#") 서호동

        div(class="btn-group btn-test hide")
            button(type="button" class="btn btn-primary" data-toggle="modal" data-target=".bs-example-modal-lg") open layer

        div(id="stadium" class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel")
            div(class="modal-dialog modal-lg" role="document")
                div(class="modal-content")
                    div(class="modal-header")
                        button(type="button" class="close" data-dismiss="modal" aria-label="Close")
                            span(aria-hidden="true") &times;
                        h4(class="modal-title") 제주 북부

                    div(class="modal-body")
                        p 그래프 영역

        div(id='result')
        div(id="map")

        //form(class="form-signin" action="/logout" method="post")
        //  button(class="btn btn-lg btn-primary btn-block" type="submit") Log Out

block pageScript
    include templates/jstemplates.js
    include templates/mapCoord.js
    include templates/propCoord.js
    include templates/emdList.js

    script.
        var filter = "win16|win32|win64|mac|macintel";
        var mapLevel = 9;
        if (navigator.platform) {
            if (filter.indexOf(navigator.platform.toLowerCase()) < 0) {
                mapLevel = 10;
            }
        }

        var container = document.getElementById('map');
        var options = {
            center: new daum.maps.LatLng(33.3823105, 126.5332869),
            level: mapLevel,
            draggable: true,
            scrollwheel: true,
            tileAnimation: true

        };
        var map = new daum.maps.Map(container, options);

        var $wrapDepth1 = $('.wrap-depth1');
        var $wrapDepth2 = $('.btn-emd');
        var $modalContent = $('#stadium.modal .modal-dialog');

        function initEventDepth1List() {

            $wrapDepth1.find('ul.dropdown-menu li').on('click', function () {

                var regionName = $(this).text().trim();
                $wrapDepth1.find('ul.dropdown-menu li').each(function () {
                    $(this).html('<a href="#">'+$(this).text()+'</a>');
                });

                $wrapDepth1.find('button.btn-depth1').html($(this).text()+'<span class="caret"></span>');

                var regionNameEng = $(this).data('region');
                var data = {region: $(this).text()};
                var depth1LiTempl = $.templates("#depth1Li");
                var html = depth1LiTempl.render(data);
                $(this).html(html);

                if($(this).text().trim() == '특성별'){
                    removePloygons();
                    printPorpPolygon();
                }
                if ($(this).text().trim() == '지리별') {
                    removePloygons();
                    printRegionPolygon();
                }

                if($(this).text().trim() != '지리별' && $(this).text().trim() != '특성별'){
                    $wrapDepth2.removeClass('hide');

                    var emdList = ( new Function('return ' + 'emdList.'+$(this).data('region')) )();
                    var emdCoordList = ( new Function('return ' + 'emdCoordList.'+$(this).data('region')) )();

                    var html = '';
                    for(var idx in emdList){
                        html = html+"<li data-centercoord='{\"x\":"+emdCoordList[idx].centerCoord.y+",\"y\":"+emdCoordList[idx].centerCoord.x+",\"level\":5}'><a href='#'>"+ emdList[idx] +"</a></li>";
                    }
                    $wrapDepth2.find('ul.dropdown-menu').html(html);
                    initEventDepth2List();
                    setEmdCustomOverlay(regionNameEng);
                }else{
                    $wrapDepth2.addClass('hide');
                }

                $wrapDepth2.find('button.btn-depth2').html('경기장<span class="caret"></span>');

                var centerCoord = $(this).data('centercoord');
                panTo(centerCoord.x, centerCoord.y, centerCoord.level);

            });
        }

        function initEventDepth2List() {

            $wrapDepth2.find('ul.dropdown-menu li').on('click', function () {

                var regionName = $(this).text().trim();
                $wrapDepth2.find('ul.dropdown-menu li').each(function () {
                    $(this).html('<a href="#">' + $(this).text() + '</a>');
                });

                $wrapDepth2.find('button.btn-depth2').html($(this).text() + '<span class="caret"></span>');

                var data = {region: $(this).text()};
                var depth1LiTempl = $.templates("#depth1Li");
                var html = depth1LiTempl.render(data);
                $(this).html(html);

                var centerCoord = $(this).data('centercoord');
                console.log(centerCoord);
                panTo(centerCoord.x, centerCoord.y, centerCoord.level);
            });
        }

        function initEvent() {
            initEventDepth1List();
        }


        var color = {
            east: {
                strokeColor: '#39DE2A',
                fillColor: '#A2FF99'
            },
            west: {
                strokeColor: '#c46b05',
                fillColor: '#f98500'
            },
            south: {
                strokeColor: '#FF8AEF',
                fillColor: '#FF8AEF'
            },
            north: {
                strokeColor: '#eded04',
                fillColor: '#ffff00'
            }
        };

        function printPorpPolygon() {
            getPolygonPath(CHINESE, color.east);
            getPolygonPath(KOREAN, color.west);
            getPolygonPath(BUSINESE, color.south);
            getPolygonPath(JEJUSI, color.north);
            getPolygonPath(SGPSI, color.north);
        }


        function printRegionPolygon() {
            getPolygonPath(EAST, color.east);
            getPolygonPath(WEST, color.west);
            getPolygonPath(SOUTH, color.south);
            getPolygonPath(NORTH, color.north);
        }

        var polygons = [];
        function getPolygonPath(regionCoords, colorObj) {
            var polygonPath = [];
            for (var idx in regionCoords) {
                for (var dataIdx in regionCoords[idx].exterior) {
                    var coordObj = regionCoords[idx].exterior[dataIdx];
                    polygonPath.push(new daum.maps.LatLng(coordObj.y, coordObj.x));
                }

                var polygon = new daum.maps.Polygon({
                    path: polygonPath, // 그려질 다각형의 좌표 배열입니다
                    strokeWeight: 1, // 선의 두께입니다
                    strokeColor: colorObj.strokeColor, // 선의 색깔입니다
                    strokeOpacity: 0.2, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
                    strokeStyle: 'solid', // 선의 스타일입니다
                    fillColor: colorObj.fillColor, // 채우기 색깔입니다
                    fillOpacity: 0.2 // 채우기 불투명도 입니다
                });

                // 지도에 다각형을 표시합니다
                var emdName = regionCoords[idx].region
                polygon.setMap(map);
                polygons.push({emd: emdName, polygon: polygon});

                polygonPath = [];
            }
        }


        var polygons = [];
        function setPolygon(polygonPath, colorObj) {
            // 지도에 표시할 다각형을 생성합니다
            var polygon = new daum.maps.Polygon({
                path: polygonPath, // 그려질 다각형의 좌표 배열입니다
                strokeWeight: 1, // 선의 두께입니다
                strokeColor: colorObj.strokeColor, // 선의 색깔입니다
                strokeOpacity: 0.2, // 선의 불투명도 입니다 1에서 0 사이의 값이며 0에 가까울수록 투명합니다
                strokeStyle: 'solid', // 선의 스타일입니다
                fillColor: colorObj.fillColor, // 채우기 색깔입니다
                fillOpacity: 0.2 // 채우기 불투명도 입니다
            });

            // 지도에 다각형을 표시합니다
            polygon.setMap(map);
            polygons.push({emd:'',polygon: polygon});
        }

        var northData = {
            fontColor: '#f9d400',
            nameEng: 'north',
            name: '북부',
            btnClass: 'btn-default',
            centerCoord: {
                x: 33.457543138530234,
                y: 126.52121318906023
            }
        };
        var southData = {
            fontColor: '#f901e8',
            nameEng: 'south',
            name: '남부',
            btnClass: 'btn-default',
            centerCoord: {
                x: 33.31297232505243,
                y: 126.51478872617335
            }
        };
        var eastData = {
            fontColor: '#00c451',
            nameEng: 'east',
            name: '동부',
            btnClass: 'btn-default',
            centerCoord: {
                x: 33.46986571255288,
                y: 126.81203766523701
            }
        };
        var westhData = {
            fontColor: '#f26a02',
            nameEng: 'west',
            name: '서부',
            btnClass: 'btn-default',
            centerCoord: {
                x: 33.31711594804748,
                y: 126.24637996878465
            }
        };

        function printCustomOverlay() {
            var regionMarkerTempl = $.templates("#regionMarker");
            var northContent = regionMarkerTempl.render(northData);
            var southContent = regionMarkerTempl.render(southData);
            var eastContent = regionMarkerTempl.render(eastData);
            var westContent = regionMarkerTempl.render(westhData);

            var northPosition = new daum.maps.LatLng(33.466480653936, 126.5251800177313);
            var southPosition = new daum.maps.LatLng(33.29040997575155, 126.50694775763147);
            var eastPosition = new daum.maps.LatLng(33.443531160648355, 126.78002412238946);
            var westPosition = new daum.maps.LatLng(33.31341656714869, 126.25940514997819);

            setRegionCustomOverlay(northContent, northPosition);
            setRegionCustomOverlay(southContent, southPosition);
            setRegionCustomOverlay(eastContent, eastPosition);
            setRegionCustomOverlay(westContent, westPosition);

            //addEventOnRegionOverLay();
        }


        var customOverlays = [];
        function setRegionCustomOverlay(content, position) {

            var customOverlay = new daum.maps.CustomOverlay({
                position: position,
                content: content,
                xAnchor: 0.3,
                yAnchor: 0.91
            });
            customOverlay.setMap(map);
            customOverlays.push(customOverlay);
        }

        function showDetailOnRegion(el) {
            var $el = $(el);
            //refreshPolygons(polygons);

            var regionName = $el.data('region');
            var regionNameEng = $el.data('regioneng');
            var coordX = $el.data('xcoord');
            var coordY = $el.data('ycoord');

            panTo(coordX, coordY, 8);
            setEmdCustomOverlay(regionNameEng);

            $wrapDepth1.find('ul.dropdown-menu li').each(function () {
                if ($(this).text().indexOf(regionName) != -1) {
                    $(this).trigger('click');
                }
            });

            var data = {
                region: regionName
            };
            var graphModalTempl = $.templates("#graphModal");
            var graphContent = graphModalTempl.render(data);
            $modalContent.html(graphContent);

            for (var i = 0; i < customOverlays.length; i++) {
                //customOverlays[i].setMap(null);
            }
        }

        var emdOverlays = [];

        function setEmdCustomOverlay(regionNameEng) {

            if (emdOverlays.length > 0) {
                for (var i = 0; i < emdOverlays.length; i++) {
                    emdOverlays[i].setMap(null);
                }
                emdOverlays = [];
            }


            var plagroundApi = 'http://localhost:3000/api/playGround';
            var result = {};
            var emdMarkerTempl = $.templates("#emdMarker");

            $.ajax({
                url: plagroundApi,
                dataType: 'json',
                success: function (data) {
                    console.log('성공 - ', data.result);
                    result = data.result;
                },
                error: function (xhr) {
                    console.log('실패 - ', xhr);
                }
            }).done(function () {
                console.log('done');

                var coordObj = result.play_ground;

                for (var idx in coordObj) {
                    if(!isEmpty(coordObj[idx].y.trim()) && !isEmpty(coordObj[idx].x.trim())){
                        console.log(coordObj[idx].x, coordObj[idx].y);
                        var content = emdMarkerTempl.render(coordObj[idx]);
                        var position = new daum.maps.LatLng(coordObj[idx].y, coordObj[idx].x);

                        var emdOverlay = new daum.maps.CustomOverlay({
                            position: position,
                            content: content,
                            xAnchor: 0.0,
                            yAnchor: 0.0
                        });

                        emdOverlay.setMap(map);
                        emdOverlays.push(emdOverlay);
                    }
                }

            });
        }

        var isEmpty = function (value) {
            if (value == "" || value == null || value == undefined || ( value != null && typeof value == "object" && !Object.keys(value).length )) {
                return true
            } else {
                return false
            }
        };

        function showDetailOnEmd(el) {
            var $el = $(el);
            refreshPolygons(polygons);
            var regionName = $el.data('region');
            var regionNameEng = $el.data('regioneng');
            var coordX = $el.data('xcoord');
            var coordY = $el.data('ycoord');
            var wx = $el.data('wx');
            var wy = $el.data('wy');

            var date = new Date();
            var datetxt = date.yyyymmdd();


            getWeather(wx, wy, function () {
                getSchedule(regionName, datetxt, function () {
                    printModal(regionName);
                });
            });


            $wrapDepth2.find('ul.dropdown-menu li').each(function () {
                if ($(this).text().indexOf(regionName) != -1) {
                    $(this).trigger('click');
                }
            });

            panTo(coordX, coordY, 5);

            for (var idx in polygons) {
                if (regionName.trim() == polygons[idx].emd) {
                    polygons[idx].polygon.setOptions({
                        strokeWeight: 3,
                        strokeColor: '#000714',
                        strokeOpacity: 0.5
                    });
                }
            }

        }

        function printModal(stadium) {

            var reservedDate = schedule[0].date;
            var reservedDateWeathers = {};
            var reservedDateSky = [];
            var reservedDatePop = [];
            var reservedDatePty = [];
            var reservedDateR06 = [];
            var reservedDateReh = [];
            var reservedDateT3h = [];
            var reservedDateWsd = [];

            for (var idx in weathers) {
                var weather = weathers[idx];
                if (reservedDate == weather.fcstDate) {
                    if (weather.category == 'SKY') {
                        reservedDateSky.push(weather);
                    }
                    if (weather.category == 'POP') {
                        reservedDatePop.push(weather);
                    }
                    if (weather.category == 'PTY') {
                        reservedDatePty.push(weather);
                    }
                    if (weather.category == 'R06') {
                        reservedDateR06.push(weather);
                    }
                    if (weather.category == 'REH') {
                        reservedDateReh.push(weather);
                    }
                    if (weather.category == 'T3H') {
                        reservedDateT3h.push(weather);
                    }
                    if (weather.category == 'WSD') {
                        reservedDateWsd.push(weather);
                    }
                }
            }

            reservedDateWeathers = {
                sky: reservedDateSky,
                pop: reservedDatePop,
                pty: reservedDatePty,
                r06: reservedDateR06,
                reh: reservedDateReh,
                t3h: reservedDateT3h,
                wsd: reservedDateWsd
            };


            var data = {
                region: stadium,
                schedule: schedule,
                weather: reservedDateWeathers,
                date: schedule[0].date.substring(4,6)+'/'+schedule[0].date.substring(6,8)+'/'+schedule[0].date.substring(0,4)
            };

            console.log(data);
            var graphModalTempl = $.templates("#guestModal");
            var graphContent = graphModalTempl.render(data);
            $modalContent.html(graphContent);

            $('#datetimepicker1').datepicker({
                language: "kr",
                todayHighlight: true
            }).on('changeDate', function (e) {
                console.log(e.date);
                $('#datetimepicker1').datepicker('hide', '');
                var date = new Date(e.date);
                var datetxt = date.yyyymmdd();

                getSchedule(stadium, datetxt, function () {
                    printModal(stadium);
                });

                // `e` here contains the extra attributes
            });

            $('#collapseOne .btn-primary').on('click', function () {
                $(this).removeClass('btn-primary');
                $(this).addClass('btn-success');
                $(this).text('선택됨');
                var amount = $('.amount').text();
                amount = parseInt(amount.replace(',','')) + 22000;
                $('.amount').text(numberWithCommas(amount));
            });

            $(".chkbox input").change(function () {
                if ($(this).is(":checked")) {
                    var amount = $('.amount').text();
                    amount = parseInt(amount.replace(',','')) + 5000;
                    $('.amount').text(numberWithCommas(amount));
                } else {
                    var amount = $('.amount').text();
                    amount = parseInt(amount.replace(',','')) - 5000;
                    $('.amount').text(numberWithCommas(amount));
                }
            });

            $('.payment').on('click', function () {
                var $btn = $(this).button('loading');
                $('.progress').removeClass('hide');
                // business logic...
                $('.progress div').animate({width: "100%"}, 1000);

                $btn.button('reset');

            });
        }

        function numberWithCommas(x) {
            return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }


        var weathers = [];
        function getWeather(wx, wy, callback) {
            var plagroundApi = 'http://localhost:3000/api/weather?wx='+wx+'&wy='+wy;
            weathers = [];

            $.ajax({
                url: plagroundApi,
                dataType: 'json',
                success: function (data) {
                    console.log('성공 - ', data.response);
                    weathers = data.response.body.items.item;
                },
                error: function (xhr) {
                    console.log('실패 - ', xhr);
                }
            }).done(function () {
                console.log('done');
                callback();
            });
        }


        var schedule = [];
        function getSchedule(stadium, date, callback) {
            console.log('tests;',stadium, date);
            var plagroundApi = 'http://localhost:3000/api/schedule?stadium=' + stadium + '&date=' + date;
            console.log(plagroundApi);
            schedule = [];

            $.ajax({
                url: plagroundApi,
                dataType: 'json',
                success: function (data) {
                    console.log('성공 - ', data.result);
                    schedule = data.result;
                },
                error: function (xhr) {
                    console.log('실패 - ', xhr);
                }
            }).done(function () {
                console.log('done');
                callback();
            });
        }

        function refreshPolygons(polygons) {
            removePloygons();
            printRegionPolygon();
        }
        function removePloygons() {
            for (var idx in polygons) {
                polygons[idx].polygon.setMap(null);
            }
        }

        function panTo(x, y, level) {
            var mapLevel = level || 8;
            var moveLatLon = new daum.maps.LatLng(x, y);
            map.setLevel(mapLevel);
            map.panTo(moveLatLon);
        }

        daum.maps.event.addListener(map, 'center_changed', function () {

            // 지도의  레벨을 얻어옵니다
            var level = map.getLevel();

            // 지도의 중심좌표를 얻어옵니다
            var latlng = map.getCenter();

            var message = '<p>지도 레벨은 ' + level + ' 이고</p>';
            message += '<p>중심 좌표는 위도 ' + latlng.getLat() + ', 경도 ' + latlng.getLng() + '입니다</p>';

            console.log(message);

        });

        Date.prototype.yyyymmdd = function () {
            var mm = this.getMonth() + 1; // getMonth() is zero-based
            var dd = this.getDate();

            return [this.getFullYear(),
                (mm > 9 ? '' : '0') + mm,
                (dd > 9 ? '' : '0') + dd
            ].join('');
        };


        function getjson() {
            var plagroundApi = 'http://localhost:3000/api/playGround';
            var result = {};
            $.ajax({
                url: plagroundApi,
                dataType: 'json',
                success: function (data) {
                    console.log('성공 - ', data.result);
                    result = data.result;
                },
                error: function (xhr) {
                    console.log('실패 - ', xhr);
                }
            }).done(function () {
                console.log('done');
                return result;
            });
        }

        function init() {
            initEvent();
            printRegionPolygon();
            printCustomOverlay();
        }

        init();
